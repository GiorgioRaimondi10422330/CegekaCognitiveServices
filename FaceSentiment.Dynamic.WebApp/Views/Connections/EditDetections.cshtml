@model FaceSentiment.Dynamic.WebApp.Models.DetectionSetting

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    <hr />
    <h3>DetectionSetting</h3>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.SecondForDetection, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SecondForDetection, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SecondForDetection, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EyeMinDimension, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EyeMinDimension, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EyeMinDimension, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FaceMinDimension, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FaceMinDimension, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FaceMinDimension, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EyeNeighboors, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EyeNeighboors, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EyeNeighboors, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FaceNeighboors, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FaceNeighboors, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FaceNeighboors, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EyePercentage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EyePercentage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EyePercentage, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FacePercentage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FacePercentage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FacePercentage, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TrackPrecision, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TrackPrecision, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TrackPrecision, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">

    var ShowError = function () {
        var v=@Html.Raw(Json.Encode(ViewBag.Error));
        if (v!= null && v!="") {
            alert(v);
            v= null;
        }
    }
    ShowError();
</script>

